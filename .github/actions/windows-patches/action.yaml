name: Run bouf Patch Generation
description: Generates OBS updater manifest and patches
inputs:
  oldBuild:
    description: URL to old build
    required: true
  newBuild:
    description: URL to new build
    required: true
  tagName:
    description: GitHub Release tag
    required: true
  channel:
    description: Update channel
    required: false
    default: 'stable'

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        path: "repo"
        fetch-depth: 0
        ref: ${{ inputs.tagName }}

    - name: Download Builds
      shell: pwsh
      run: |
        . ${env:GITHUB_ACTION_PATH}\Ensure-Location.ps1
        Ensure-Location "${{ github.workspace }}/build"
        Ensure-Location "${{ github.workspace }}/old_builds/builds"
        Invoke-WebRequest "${{ inputs.oldBuild }}" -OutFile "${{ github.workspace }}/old.zip"
        Invoke-WebRequest "${{ inputs.newBuild }}" -OutFile "${{ github.workspace }}/new.zip"
        # Version name doesn't really matter, it just needs to be an "old" build
        Expand-Archive -Path "${{ github.workspace }}/old.zip" -DestinationPath "${{ github.workspace }}/old_builds/builds/30.2.0-beta1"
        Expand-Archive -Path "${{ github.workspace }}/new.zip" -DestinationPath "${{ github.workspace }}/build"

    - name: Setup bouf
      shell: pwsh
      env:
        BOUF_TAG: 'v0.6.4'
        BOUF_HASH: 'aca6810e741dc38ff843fab7b25a0ad8570ee84f5595132cf0cc4a5b0131b4c4'
        BOUF_NSIS_HASH: 'ed453784486556bd959d56743a8478ad3f68fe0305e9b43ac19d8771d0515257'
        GH_TOKEN: ${{ github.token }}
      run: |
        # Download bouf release
        . ${env:GITHUB_ACTION_PATH}\Ensure-Location.ps1
        . ${env:GITHUB_ACTION_PATH}\Invoke-External.ps1
        Ensure-Location bouf
        $windows_zip = "bouf-windows-${env:BOUF_TAG}.zip"
        $nsis_zip = "bouf-nsis-${env:BOUF_TAG}.zip"
        Invoke-External gh release download "${env:BOUF_TAG}" -R "obsproject/bouf" -p $windows_zip -p $nsis_zip

        if ((Get-FileHash $windows_zip -Algorithm SHA256).Hash -ne "${env:BOUF_HASH}") {
          throw "bouf hash does not match."
        }
        if ((Get-FileHash $nsis_zip -Algorithm SHA256).Hash -ne "${env:BOUF_NSIS_HASH}") {
          throw "NSIS package hash does not match."
        }

        Expand-Archive -Path $windows_zip -DestinationPath bin
        Expand-Archive -Path $nsis_zip -DestinationPath nsis

    - name: Install pandoc
      shell: pwsh
      run: |
        choco install pandoc -y --no-progress

    - name: Prepare Release Notes
      shell: pwsh
      id: notes
      run: |
        # Release notes are just the tag body on Windows
        Set-Location repo
        git tag -l --format='%(contents:subject)' ${{ inputs.tagName }} > "${{ github.workspace }}/notes.rst"
        Write-Output "######################################################################################" >> "${{ github.workspace }}/notes.rst"
        Write-Output "" >> "${{ github.workspace }}/notes.rst"
        git tag -l --format='%(contents:body)' ${{ inputs.tagName }} >> "${{ github.workspace }}/notes.rst"
        $commitHash = git rev-list -n 1 ${{ inputs.tagName }}
        "commitHash=${commitHash}" >> $env:GITHUB_OUTPUT

    - name: Run bouf
      shell: pwsh
      run: |
        . ${env:GITHUB_ACTION_PATH}\Invoke-External.ps1
        $version = "${{ inputs.tagName }}"
        $version -match "(([^\-]+)(\-(rc|beta)[0-9]+)?(?<eb_suffix>\-enhanced-(.*))?)"
        $version = $version.Replace($Matches.eb_suffix, "")
        $boufArgs = @(
           "--config",     "${env:GITHUB_ACTION_PATH}/config.toml"
           "--version",    "${version}"
           "--commit",     "${{ steps.notes.outputs.commitHash }}"
           "--branch",     "${{ inputs.channel }}"
           "--notes-file", "${{ github.workspace }}/notes.rst"
           "-i",           "${{ github.workspace }}/build"
           "-p",           "${{ github.workspace }}/old_builds"
           "-o",           "${{ github.workspace }}/output"
           "--skip-patches"
           "--updater-data-only"
        )
        Invoke-External "${{ github.workspace }}\bouf\bin\bouf.exe" @boufArgs

    - name: Fixup Manifest
      shell: python
      run: |
        import json
        import hashlib

        # create new portable mode file
        text = b"Portable mode, yay!"
        # blake2 is used with 160 bit digest size since it was mean to be a drop-in replacement for SHA1
        hex_hash = hashlib.blake2b(text, digest_size=20).hexdigest()
        with open(r"${{ github.workspace }}/output/updater/update_studio/${{ inputs.channel }}/core/obs_portable_mode.txt", 'wb') as f:
            f.write(text)

        # update manifest
        manifest_path = r"${{ github.workspace }}/output/manifest.json"
        manifest = json.load(open(manifest_path, encoding='utf-8'))

        manifest['packages'][0]['removed_files'] = [rf for rf in manifest['packages'][0]['removed_files'] if 'portable' not in rf]
        manifest['packages'][0]['files'].append({
          "compressed_hash": "",
          "hash": hex_hash,
          "name": "obs_portable_mode.txt",
          "size": len(text)
        })

        json.dump(manifest, open(manifest_path, 'w', encoding='utf-8', newline='\n'), indent=4, sort_keys=True)

    - name: Upload Outputs
      uses: actions/upload-artifact@v4.3.5
      with:
        name: windows-updater-files
        compression-level: 0
        path: ${{ github.workspace }}/output
